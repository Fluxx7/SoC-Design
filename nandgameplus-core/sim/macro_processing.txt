INCLUDE stack_macros_ngp.txt
INCLUDE number_macros_ngp.txt

DEFINE addrMem 0x600
DEFINE addrOffset 1
DEFINE dispAddrOffset 0x2

# TOP MACRO 
# init.stack
$sp = 256

# TOP MACRO 
# llimm addrMem dispAddrOffset $a
$a = addrMem
$a = $a << 4
$sp* = dispAddrOffset
$a = $a | $sp*

# TOP MACRO 
# llimm 0x400 0 $a*
$a* = 0x400
$a* = $a* << 4
$sp* = 0
$a* = $a* | $sp*


main:

# TOP MACRO 
# call waitSync 0
# push.static ARGS
$a = ARGS
# push.reg $a*
$sp* = $a*
$sp = $sp + 1
$d = $a
$a = 0
$d = $d - $a
$a = ARGS
$a* = $d
# push.static LOCALS
$a = LOCALS
# push.reg $a*
$sp* = $a*
$sp = $sp + 1
# push.reg $zr*
$sp* = $zr*
$sp = $sp + 1
$zr* = 0_13_call_returnAddress
# goto waitSync
$d = waitSync
@: $d
0_13_call_returnAddress:

# pop.reg $zr*
$sp = $sp - 1
$zr* = $sp*
# pop.static LOCALS
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = LOCALS
$a* = $d
# pop.static 3
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = 3
$a* = $d
$a = ARGS
$sp = $a*
# push.static 3
$a = 3
# push.reg $a*
$sp* = $a*
$sp = $sp + 1
# pop.static ARGS
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = ARGS
$a* = $d
# push.static RETVAL
$a = RETVAL
# push.reg $a*
$sp* = $a*
$sp = $sp + 1

# TOP MACRO 
# pop.reg $d
$sp = $sp - 1
$d = $sp*

$a = end
$d == $zr :: $a
# TOP MACRO 
# call render 0
# push.static ARGS
$a = ARGS
# push.reg $a*
$sp* = $a*
$sp = $sp + 1
$d = $a
$a = 0
$d = $d - $a
$a = ARGS
$a* = $d
# push.static LOCALS
$a = LOCALS
# push.reg $a*
$sp* = $a*
$sp = $sp + 1
# push.reg $zr*
$sp* = $zr*
$sp = $sp + 1
$zr* = 0_17_call_returnAddress
# goto render
$d = render
@: $d
0_17_call_returnAddress:

# pop.reg $zr*
$sp = $sp - 1
$zr* = $sp*
# pop.static LOCALS
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = LOCALS
$a* = $d
# pop.static 3
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = 3
$a* = $d
$a = ARGS
$sp = $a*
# push.static 3
$a = 3
# push.reg $a*
$sp* = $a*
$sp = $sp + 1
# pop.static ARGS
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = ARGS
$a* = $d
# push.static RETVAL
$a = RETVAL
# push.reg $a*
$sp* = $a*
$sp = $sp + 1

$d = 0x20
# TOP MACRO 
# llimm addrMem dispAddrOffset $a
$a = addrMem
$a = $a << 4
$sp* = dispAddrOffset
$a = $a | $sp*

$a* = $a* + $d
$a = main
@: $a

# TOP MACRO 
# function waitSync 1
waitSync:
$a = LOCALS
$a* = $sp
$a = 1
$sp = $sp + $a


LABEL wait_sync:
# TOP MACRO 
# llimm addrMem addrOffset $a
$a = addrMem
$a = $a << 4
$sp* = addrOffset
$a = $a | $sp*

$d = $a*
$a = 2
$d = $d & $a
# TOP MACRO 
# push.reg $d
$sp* = $d
$sp = $sp + 1

# TOP MACRO 
# pop.local 0
$d = 0
$a = LOCALS
$d = $d + $a*
$sp = $sp - 1
$d* = $sp*


loop_sync:
# TOP MACRO 
# llimm addrMem addrOffset $a
$a = addrMem
$a = $a << 4
$sp* = addrOffset
$a = $a | $sp*

$d = $a*
$a = 2
$d = $d & $a
# TOP MACRO 
# push.reg $d
$sp* = $d
$sp = $sp + 1

# TOP MACRO 
# push.local 0
$d = 0
$a = LOCALS
$d = $d + $a*
# push.reg $d*
$sp* = $d*
$sp = $sp + 1

# TOP MACRO 
# pop.reg $d
$sp = $sp - 1
$d = $sp*

$a = loop_sync
$sp = $sp - 1
$d == $sp* :: $a


# TOP MACRO 
# llimm addrMem addrOffset $d
$d = addrMem
$d = $d << 4
$sp* = addrOffset
$d = $d | $sp*

$a = 1
$sp* = $d* & $a
$sp = $sp + 1
# TOP MACRO 
# return
# pop.static RETVAL
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = RETVAL
$a* = $d
$a = LOCALS
$sp = $a*
@: $zr*


# TOP MACRO 
# function render 1
render:
$a = LOCALS
$a* = $sp
$a = 1
$sp = $sp + $a

# TOP MACRO 
# push.value 0
$sp* = 0
$sp = $sp + 1

# TOP MACRO 
# pop.local 0
$d = 0
$a = LOCALS
$d = $d + $a*
$sp = $sp - 1
$d* = $sp*


render_loop:
# TOP MACRO 
# call waitSync 0
# push.static ARGS
$a = ARGS
# push.reg $a*
$sp* = $a*
$sp = $sp + 1
$d = $a
$a = 0
$d = $d - $a
$a = ARGS
$a* = $d
# push.static LOCALS
$a = LOCALS
# push.reg $a*
$sp* = $a*
$sp = $sp + 1
# push.reg $zr*
$sp* = $zr*
$sp = $sp + 1
$zr* = 0_58_call_returnAddress
# goto waitSync
$d = waitSync
@: $d
0_58_call_returnAddress:

# pop.reg $zr*
$sp = $sp - 1
$zr* = $sp*
# pop.static LOCALS
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = LOCALS
$a* = $d
# pop.static 3
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = 3
$a* = $d
$a = ARGS
$sp = $a*
# push.static 3
$a = 3
# push.reg $a*
$sp* = $a*
$sp = $sp + 1
# pop.static ARGS
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = ARGS
$a* = $d
# push.static RETVAL
$a = RETVAL
# push.reg $a*
$sp* = $a*
$sp = $sp + 1

# TOP MACRO 
# pop.reg $d
$sp = $sp - 1
$d = $sp*

# TOP MACRO 
# llimm addrMem dispAddrOffset $a
$a = addrMem
$a = $a << 4
$sp* = dispAddrOffset
$a = $a | $sp*

$a = $a*
$d = $a* + $d
$a* = $a* + $d
# TOP MACRO 
# push.local 0
$d = 0
$a = LOCALS
$d = $d + $a*
# push.reg $d*
$sp* = $d*
$sp = $sp + 1

# TOP MACRO 
# push.value 1
$sp* = 1
$sp = $sp + 1

# TOP MACRO 
# add
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$sp = $sp - 1
$sp* = $sp* + $d
$sp = $sp + 1

# TOP MACRO 
# pop.local 0
$d = 0
$a = LOCALS
$d = $d + $a*
$sp = $sp - 1
$d* = $sp*

$a = 16
$d = $a - $d
$a = render_return
$d == $zr :: $a
# TOP MACRO 
# goto render_loop
$d = render_loop
@: $d


render_return:
# TOP MACRO 
# return
# pop.static RETVAL
# pop.reg $d
$sp = $sp - 1
$d = $sp*
$a = RETVAL
$a* = $d
$a = LOCALS
$sp = $a*
@: $zr*



end:

