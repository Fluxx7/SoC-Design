# Assembler code 
DEFINE addr 0x7FFF
DEFINE obs_mask 0b100000000
DEFINE turn_mask 0b1000000000
DEFINE move_mask 0x0400


LABEL main
A = obs_mask
D = A
A = addr
D = D&*A
# move forward if there's no obstacle
A = forward
D ; JEQ
# turn left if there is
A = left
JMP

# moves forward one
LABEL forward
A = 0b100
D = A
A = addr
D *A = D|*A

LABEL fwd_loop
A = move_mask
D = D&A 
A = main
# stop waiting if bit 10 is 0 
D ; JEQ 

# keep waiting otherwise
A = addr
D = *A
A = fwd_loop
JMP

LABEL left
A = 0b1000
D = -A
A = addr
D *A = D|*A

LABEL left_loop
A = turn_mask
D = D&A 
A = main
# stop waiting if bit 10 is 0 
D ; JEQ 

# keep waiting otherwise
A = addr
D = *A
A = left_loop
JMP